// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: proto/im/v1/conn.proto

package v1

import (
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type SignInCode int32

const (
	SignInCode_success       SignInCode = 0
	SignInCode_tokenExpired  SignInCode = 1
	SignInCode_tokenInvalid  SignInCode = 2
	SignInCode_updateVersion SignInCode = 3
)

var SignInCode_name = map[int32]string{
	0: "success",
	1: "tokenExpired",
	2: "tokenInvalid",
	3: "updateVersion",
}

var SignInCode_value = map[string]int32{
	"success":       0,
	"tokenExpired":  1,
	"tokenInvalid":  2,
	"updateVersion": 3,
}

func (x SignInCode) String() string {
	return proto.EnumName(SignInCode_name, int32(x))
}

func (SignInCode) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_b124eb8206312b0f, []int{0}
}

// 频道类型
type ChannelType int32

const (
	ChannelType_personal      ChannelType = 0
	ChannelType_workRoom      ChannelType = 1
	ChannelType_communityRoom ChannelType = 2
	ChannelType_meetingRoom   ChannelType = 3
	ChannelType_liveChatRoom  ChannelType = 4
	ChannelType_largeRoom     ChannelType = 5
)

var ChannelType_name = map[int32]string{
	0: "personal",
	1: "workRoom",
	2: "communityRoom",
	3: "meetingRoom",
	4: "liveChatRoom",
	5: "largeRoom",
}

var ChannelType_value = map[string]int32{
	"personal":      0,
	"workRoom":      1,
	"communityRoom": 2,
	"meetingRoom":   3,
	"liveChatRoom":  4,
	"largeRoom":     5,
}

func (x ChannelType) String() string {
	return proto.EnumName(ChannelType_name, int32(x))
}

func (ChannelType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_b124eb8206312b0f, []int{1}
}

// 消息类型
type MessageType int32

const (
	MessageType_auth      MessageType = 0
	MessageType_chat      MessageType = 1
	MessageType_heartbeat MessageType = 2
	MessageType_syncTime  MessageType = 3
)

var MessageType_name = map[int32]string{
	0: "auth",
	1: "chat",
	2: "heartbeat",
	3: "syncTime",
}

var MessageType_value = map[string]int32{
	"auth":      0,
	"chat":      1,
	"heartbeat": 2,
	"syncTime":  3,
}

func (x MessageType) String() string {
	return proto.EnumName(MessageType_name, int32(x))
}

func (MessageType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_b124eb8206312b0f, []int{2}
}

// 响应码:对上行消息的状态响应
type ResponseCode int32

const (
	ResponseCode_ok              ResponseCode = 0
	ResponseCode_blackList       ResponseCode = 1
	ResponseCode_gag             ResponseCode = 2
	ResponseCode_badMessage      ResponseCode = 3
	ResponseCode_rateLimit       ResponseCode = 4
	ResponseCode_notMember       ResponseCode = 5
	ResponseCode_channelNotExist ResponseCode = 6
	ResponseCode_channelBan      ResponseCode = 7
)

var ResponseCode_name = map[int32]string{
	0: "ok",
	1: "blackList",
	2: "gag",
	3: "badMessage",
	4: "rateLimit",
	5: "notMember",
	6: "channelNotExist",
	7: "channelBan",
}

var ResponseCode_value = map[string]int32{
	"ok":              0,
	"blackList":       1,
	"gag":             2,
	"badMessage":      3,
	"rateLimit":       4,
	"notMember":       5,
	"channelNotExist": 6,
	"channelBan":      7,
}

func (x ResponseCode) String() string {
	return proto.EnumName(ResponseCode_name, int32(x))
}

func (ResponseCode) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_b124eb8206312b0f, []int{3}
}

// 设备类型
type DeviceType int32

const (
	DeviceType_app    DeviceType = 0
	DeviceType_web    DeviceType = 1
	DeviceType_pc     DeviceType = 2
	DeviceType_system DeviceType = 3
)

var DeviceType_name = map[int32]string{
	0: "app",
	1: "web",
	2: "pc",
	3: "system",
}

var DeviceType_value = map[string]int32{
	"app":    0,
	"web":    1,
	"pc":     2,
	"system": 3,
}

func (x DeviceType) String() string {
	return proto.EnumName(DeviceType_name, int32(x))
}

func (DeviceType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_b124eb8206312b0f, []int{4}
}

// 上行消息
type ClientMessage struct {
	Type    MessageType `protobuf:"varint,1,opt,name=type,proto3,enum=MessageType" json:"type,omitempty"`
	Message []byte      `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
}

func (m *ClientMessage) Reset()         { *m = ClientMessage{} }
func (m *ClientMessage) String() string { return proto.CompactTextString(m) }
func (*ClientMessage) ProtoMessage()    {}
func (*ClientMessage) Descriptor() ([]byte, []int) {
	return fileDescriptor_b124eb8206312b0f, []int{0}
}
func (m *ClientMessage) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ClientMessage) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ClientMessage.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ClientMessage) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ClientMessage.Merge(m, src)
}
func (m *ClientMessage) XXX_Size() int {
	return m.Size()
}
func (m *ClientMessage) XXX_DiscardUnknown() {
	xxx_messageInfo_ClientMessage.DiscardUnknown(m)
}

var xxx_messageInfo_ClientMessage proto.InternalMessageInfo

func (m *ClientMessage) GetType() MessageType {
	if m != nil {
		return m.Type
	}
	return MessageType_auth
}

func (m *ClientMessage) GetMessage() []byte {
	if m != nil {
		return m.Message
	}
	return nil
}

func init() {
	proto.RegisterEnum("SignInCode", SignInCode_name, SignInCode_value)
	proto.RegisterEnum("ChannelType", ChannelType_name, ChannelType_value)
	proto.RegisterEnum("MessageType", MessageType_name, MessageType_value)
	proto.RegisterEnum("ResponseCode", ResponseCode_name, ResponseCode_value)
	proto.RegisterEnum("DeviceType", DeviceType_name, DeviceType_value)
	proto.RegisterType((*ClientMessage)(nil), "ClientMessage")
}

func init() { proto.RegisterFile("proto/im/v1/conn.proto", fileDescriptor_b124eb8206312b0f) }

var fileDescriptor_b124eb8206312b0f = []byte{
	// 472 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x4c, 0x92, 0xcf, 0x6e, 0xd3, 0x40,
	0x10, 0xc6, 0xbd, 0x76, 0x9a, 0x94, 0x49, 0xd2, 0x2e, 0x8b, 0x84, 0x72, 0xb2, 0x22, 0x4e, 0x55,
	0xa4, 0xc6, 0xa2, 0x1c, 0x91, 0x38, 0x34, 0x54, 0xa2, 0xa2, 0x45, 0x28, 0x54, 0x1c, 0xb8, 0xad,
	0x37, 0x83, 0xbd, 0x8a, 0xf7, 0x8f, 0xbc, 0xeb, 0xb4, 0x3e, 0xf2, 0x06, 0x3c, 0x16, 0xc7, 0x1e,
	0x39, 0xa2, 0xe4, 0x45, 0xd0, 0x3a, 0x01, 0xf5, 0x36, 0xf3, 0xb3, 0xbf, 0x6f, 0xbe, 0x19, 0x2d,
	0xbc, 0xb4, 0xb5, 0xf1, 0x26, 0x93, 0x2a, 0xdb, 0xbc, 0xce, 0x84, 0xd1, 0x7a, 0xde, 0x81, 0x57,
	0x1f, 0x61, 0xbc, 0xa8, 0x24, 0x6a, 0x7f, 0x8b, 0xce, 0xf1, 0x02, 0xd9, 0x14, 0x7a, 0xbe, 0xb5,
	0x38, 0x21, 0x53, 0x72, 0x76, 0x72, 0x31, 0x9a, 0x1f, 0xf8, 0x5d, 0x6b, 0x71, 0xd9, 0x7d, 0x61,
	0x13, 0x18, 0xa8, 0x3d, 0x9c, 0xc4, 0x53, 0x72, 0x36, 0x5a, 0xfe, 0x6b, 0x67, 0x9f, 0x01, 0xbe,
	0xc8, 0x42, 0x5f, 0xeb, 0x85, 0x59, 0x21, 0x1b, 0xc2, 0xc0, 0x35, 0x42, 0xa0, 0x73, 0x34, 0x62,
	0x14, 0x46, 0xde, 0xac, 0x51, 0x5f, 0x3d, 0x58, 0x59, 0xe3, 0x8a, 0x92, 0xff, 0xe4, 0x5a, 0x6f,
	0x78, 0x25, 0x57, 0x34, 0x66, 0xcf, 0x61, 0xdc, 0xd8, 0x15, 0xf7, 0xf8, 0x15, 0x6b, 0x27, 0x8d,
	0xa6, 0xc9, 0x4c, 0xc3, 0x70, 0x51, 0x72, 0xad, 0xb1, 0x0a, 0x01, 0xd8, 0x08, 0x8e, 0x2d, 0xd6,
	0xce, 0x68, 0x5e, 0xd1, 0x28, 0x74, 0xf7, 0xa6, 0x5e, 0x2f, 0x8d, 0x51, 0x94, 0x04, 0xb5, 0x30,
	0x4a, 0x35, 0x5a, 0xfa, 0xb6, 0x43, 0x31, 0x3b, 0x85, 0xa1, 0x42, 0xf4, 0x52, 0x17, 0x1d, 0x48,
	0xc2, 0xcc, 0x4a, 0x6e, 0x70, 0x51, 0x72, 0xdf, 0x91, 0x1e, 0x1b, 0xc3, 0xb3, 0x8a, 0xd7, 0x05,
	0x76, 0xed, 0xd1, 0xec, 0x1d, 0x0c, 0x9f, 0x2c, 0xcc, 0x8e, 0xa1, 0xc7, 0x1b, 0x5f, 0xd2, 0x28,
	0x54, 0xa2, 0xe4, 0x9e, 0x92, 0xa0, 0x28, 0x91, 0xd7, 0x3e, 0x47, 0xee, 0x69, 0x1c, 0x42, 0xb8,
	0x56, 0x8b, 0x3b, 0xa9, 0x90, 0x26, 0xb3, 0x1f, 0x04, 0x46, 0x4b, 0x74, 0xd6, 0x68, 0x87, 0xdd,
	0x11, 0xfa, 0x10, 0x9b, 0x35, 0x8d, 0x82, 0x2a, 0xaf, 0xb8, 0x58, 0xdf, 0x48, 0x17, 0x4c, 0x06,
	0x90, 0x14, 0xbc, 0xa0, 0x31, 0x3b, 0x01, 0xc8, 0xf9, 0xea, 0x30, 0x93, 0x26, 0xe1, 0xbf, 0x9a,
	0x7b, 0xbc, 0x91, 0x4a, 0xfa, 0x7d, 0x3c, 0x6d, 0xfc, 0x2d, 0xaa, 0x1c, 0x6b, 0x7a, 0xc4, 0x5e,
	0xc0, 0xa9, 0xd8, 0x9f, 0xe3, 0x93, 0xf1, 0x57, 0x0f, 0xc1, 0xab, 0x1f, 0x2c, 0x0e, 0xf0, 0x92,
	0x6b, 0x3a, 0x98, 0x5d, 0x00, 0xbc, 0xc7, 0x8d, 0x14, 0xfb, 0x15, 0x06, 0x90, 0x70, 0x6b, 0x69,
	0x14, 0x8a, 0x7b, 0xcc, 0x29, 0x09, 0x91, 0xac, 0xa0, 0x31, 0x03, 0xe8, 0xbb, 0xd6, 0x79, 0x54,
	0x34, 0xb9, 0xfc, 0xf0, 0x6b, 0x9b, 0x92, 0xc7, 0x6d, 0x4a, 0xfe, 0x6c, 0x53, 0xf2, 0x73, 0x97,
	0x46, 0x8f, 0xbb, 0x34, 0xfa, 0xbd, 0x4b, 0xa3, 0x6f, 0xf3, 0x42, 0xfa, 0xb2, 0xc9, 0xe7, 0xc2,
	0xa8, 0xac, 0x92, 0x7a, 0xdd, 0x72, 0x9e, 0x7d, 0xaf, 0xda, 0x73, 0xa9, 0xce, 0xb9, 0x95, 0xd9,
	0x93, 0x67, 0xf5, 0x56, 0x2a, 0x9b, 0xe7, 0xfd, 0x8e, 0xbc, 0xf9, 0x1b, 0x00, 0x00, 0xff, 0xff,
	0xb7, 0xa5, 0x01, 0x32, 0x71, 0x02, 0x00, 0x00,
}

func (m *ClientMessage) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ClientMessage) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ClientMessage) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Message) > 0 {
		i -= len(m.Message)
		copy(dAtA[i:], m.Message)
		i = encodeVarintConn(dAtA, i, uint64(len(m.Message)))
		i--
		dAtA[i] = 0x12
	}
	if m.Type != 0 {
		i = encodeVarintConn(dAtA, i, uint64(m.Type))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintConn(dAtA []byte, offset int, v uint64) int {
	offset -= sovConn(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *ClientMessage) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Type != 0 {
		n += 1 + sovConn(uint64(m.Type))
	}
	l = len(m.Message)
	if l > 0 {
		n += 1 + l + sovConn(uint64(l))
	}
	return n
}

func sovConn(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozConn(x uint64) (n int) {
	return sovConn(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}

// Deserialize a specified number of fields, return early as soon as the specified fields are deserialized.
// 反序列化指定数量的字段,达到指定的次数就返回. 参数 targetFileNum <=0 直接返回,不进行反序列化
func (m *ClientMessage) UnmarshalWithFieldNum(dAtA []byte, targetFileNum int) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowConn
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ClientMessage: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ClientMessage: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		if targetFileNum <= 0 {
			return nil
		}
		switch fieldNum {
		case 1:
			targetFileNum--
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			m.Type = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowConn
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Type |= MessageType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			targetFileNum--
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Message", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowConn
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthConn
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthConn
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Message = append(m.Message[:0], dAtA[iNdEx:postIndex]...)
			if m.Message == nil {
				m.Message = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipConn(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthConn
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}

// Cleanup Clean up the fields of the message.
// 清理消息的字段，该方法在消息被释放时被调用，不对切片中的字段进行处理。
func (m *ClientMessage) Cleanup() {
	if m == nil {
		return
	}
	m.Type = 0
	if m.Message != nil {
		m.Message = m.Message[:0]
	}
}

// DeepCleanup Clean up the fields of the message.
// 清理消息的字段，该方法在消息被释放时被调用，递归处理切片中的字段。
func (m *ClientMessage) DeepCleanup() {
	if m == nil {
		return
	}
	m.Type = 0
	if m.Message != nil {
		m.Message = m.Message[:0]
	}
}
func (m *ClientMessage) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowConn
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ClientMessage: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ClientMessage: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			m.Type = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowConn
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Type |= MessageType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Message", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowConn
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthConn
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthConn
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Message = append(m.Message[:0], dAtA[iNdEx:postIndex]...)
			if m.Message == nil {
				m.Message = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipConn(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthConn
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipConn(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowConn
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowConn
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowConn
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthConn
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupConn
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthConn
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthConn        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowConn          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupConn = fmt.Errorf("proto: unexpected end of group")
)
